syntax = "proto3";

package coupon;

service CouponStreamService {

  rpc StreamCouponIssues(StatusFilter) returns (stream CouponIssue);

  rpc StreamActiveCoupons(UserFilter) returns (stream ActiveCouponStreamResponse);

  rpc StreamActiveBusinessesStream(EmptyRequest) returns (stream ActiveBusinessesStreamResponse);

  rpc StreamMoreCouponRequests(UserFilter) returns (stream MoreCouponRequest);

  rpc ActiveCouponIssuesWithBusinessesStream(EmptyRequest) returns (stream CouponIssueWithBusiness);
}

//NOTE: List of statuses to filter, e.g., 'active', 'suspended', 'ended'


message StatusFilter {
  repeated string statuses = 1; 
}



message CouponIssue {
  string id = 1;           
  string status = 2;       
  int64 updatedAt = 3; 
}



message UserFilter {
//  string userId = 1 [(validate.rules).string.min_len = 1];
    string userId = 1;
}

message MoreCouponRequest {
  string id = 1;           
  string userId = 2;       
  string couponIssueId = 3; 
  int64 createdAt = 4;      
  string parentId = 5;   
}



message EmptyRequest {

}


message CouponIssueWithBusiness {
  string couponIssueId = 1;
  string businessId = 2;
  string couponName = 3;
  string businessName = 4;
  string status = 5;
}


message ActiveBusinessesStreamResponse {
  string   id = 1;
  string   title = 2;
  string   description = 3;
  string   image = 4;
  repeated string categories = 5;
  string   businessId = 6;
  string   contractType = 7;
}


message ActiveCouponStreamResponse {
  string id = 1;
  RedemptionInfo redemptionInfo = 2;
  string code = 3;
  string businessId = 4;
  string couponIssueId = 5;
  bool redeemedBySelfActivation = 6;
  int32 purchasePrice = 7;
  string purchaseCurrency = 8;
  string userId = 9;
  string status = 10;
  Timestamp expireAt = 11;
  Timestamp createdAt = 12;
  Timestamp purchasedAt = 13;
}


message RedemptionInfo {
  string redeemedByBusinessManagerId = 1;
  string methodOfRedemption = 2;
}

message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}