// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: coupon_stream.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "coupon";

export interface StatusFilter {
  statuses: string[];
}

export interface CouponIssue {
  id: string;
  drawId: string;
  businessContractId: string;
  deliveryAvailable: boolean;
  deliveryContactPhone: string;
  title: string;
  image: string;
  descriptionFile: string;
  activeAt: string;
  endAt: string;
  expireAt: string;
  zoneIds: string[];
  initialAmount: number;
  currency: string;
  purchasePriceAmount: number;
  discountAmount: number;
  sellPriceAmount: number;
  ticketPriceAmount: number;
  grandDrawMultiplier: number;
  couponsSource: string;
  couponsCsvPath: string;
  additionalCouponsCsvPath: string;
  arrangement: number;
  couponsPrefix: string;
  businessId: string;
  createdAt: string;
  type: string;
  amountExpired: number;
  additionalAmount: number;
  lastIncrId: number;
  nextCodeIncrId: number;
  RawPath: string;
  restrictions: string;
  methodsOfRedemption: string[];
  amountUsed: number;
  amountSold: number;
  streamType: number;
  status: string;
}

export interface UserFilter {
  languageCode?: string | undefined;
}

export interface User {
  userId: string;
}

export interface UserPrefrences {
  languageCode?: string | undefined;
  brightness?: string | undefined;
}

export interface MoreCouponRequest {
  id: string;
  userId: string;
  couponIssueId: string;
  createdAt: number;
  parentId: string;
  streamType: number;
}

export interface EmptyRequest {
}

export interface ActiveBusinessesStreamResponse {
  id: string;
  title: string;
  description: string;
  image: string;
  categories: string[];
  businessId: string;
  contractType: string;
  streamType: number;
  logo: string;
  createdAt: string;
  sponsorshipType: string;
  suspended: boolean;
}

export interface ActiveCouponStreamResponse {
  id: string;
  redemptionInfo: RedemptionInfo | undefined;
  code: string;
  businessId: string;
  couponIssueId: string;
  redeemedBySelfActivation: boolean;
  purchasePrice: number;
  purchaseCurrency: string;
  userId: string;
  status: string;
  expireAt: string;
  createdAt: string;
  purchasedAt: string;
  streamType: number;
}

export interface CouponIssueWithBusiness {
  couponIssueId: string;
  businessId: string;
  couponName: string;
  businessName: string;
  status: string;
  logo: string;
  categories: string[];
  endsAt: string;
  amountLeft: number;
  type: string;
  priceAmount: number;
  currency: string;
  drawId: string;
  sellPriceAmount: number;
  restrictedBranchIds: string[];
  drawNumbers: string[];
  descriptionFile: string;
  purchasePriceAmount: number;
  arrangement: number;
  streamType: number;
}

export interface RedemptionInfo {
  redeemedByBusinessManagerId: string;
  methodOfRedemption: string;
}

export interface Balance {
  USD: number;
  EGP: number;
}

export interface WalletBalanceResponse {
  availableBalances: Balance | undefined;
  blockedBalances: Balance | undefined;
  streamType: number;
}

export interface ActiveDrawnResponse {
  id: string;
  contractId: string;
  businessId: string;
  type: string;
  subtype: string;
  currency: string;
  title: string;
  openAt: string;
  predrawStartAt: string;
  drawStartAt: string;
  contestsStartAt: string;
  descriptionFile: string;
  logo: string;
  amountOfNumbersByParticipant: number;
  grandDrawFreeTicketSpendingsAmount?: number | undefined;
  drawNumbersCount: number;
  participantsCount: number;
  amountOfChosenNumbers: number;
  totalPrizesValue: number;
  totalPrizesAmount: number;
  createdAt: string;
  status: string;
  streamType: number;
}

export interface TicketStreamResponse {
  id: string;
  userId: string;
  drawId: string;
  drawType: string;
  isDrawClosed: boolean;
  drawNumbers: number[];
  createdAt: string;
  status: string;
  streamType: number;
}

export interface Location {
  latitude: number;
  longitude: number;
}

export interface ZoneStreamResponse {
  id: string;
  country: string;
  createdAt: string;
  isDefault: boolean;
  name: string;
  location: Location | undefined;
  streamType: number;
}

export interface OpeningHours {
  openTime: string;
  closeTime: string;
}

export interface BusinessBranchStreamResponse {
  id: string;
  businessSuspended: boolean;
  shortAddress: string;
  businessId: string;
  zoneId: string;
  location: Location | undefined;
  openingHours: { [key: string]: OpeningHours };
  createdAt: string;
  contractTypes: string[];
  streamType: number;
}

export interface BusinessBranchStreamResponse_OpeningHoursEntry {
  key: string;
  value: OpeningHours | undefined;
}

export interface UserCartStreamItem {
  itemId: string;
  amount: number;
  purchasePrice: number;
  currency: string;
  feePrice?: number | undefined;
  taxAmount?: number | undefined;
  streamType: number;
}

export interface UserCartStreamResponse {
  items: UserCartStreamItem[];
  streamType: number;
}

export interface UserIdOptional {
  userId?: string | undefined;
}

export interface UserNotificationStreamResponse {
  id: string;
  isRead: boolean;
  createdAt: string;
  title: string;
  body: string;
  topic: string;
  screen?: string | undefined;
  userId?: string | undefined;
  streamType: number;
}

export const COUPON_PACKAGE_NAME = "coupon";

export interface CouponStreamServiceClient {
  streamCouponIssues(request: UserPrefrences): Observable<CouponIssue>;

  streamActiveCoupons(request: User): Observable<ActiveCouponStreamResponse>;

  streamActiveBusinessesStream(request: UserPrefrences): Observable<ActiveBusinessesStreamResponse>;

  streamMoreCouponRequests(request: User): Observable<MoreCouponRequest>;

  activeCouponIssuesWithBusinessesStream(request: UserPrefrences): Observable<CouponIssueWithBusiness>;

  walletStream(request: User): Observable<WalletBalanceResponse>;

  streamActiveDrawn(request: UserPrefrences): Observable<ActiveDrawnResponse>;

  ticketsStream(request: User): Observable<TicketStreamResponse>;

  zonesStream(request: UserPrefrences): Observable<ZoneStreamResponse>;

  businessBranchStream(request: UserPrefrences): Observable<BusinessBranchStreamResponse>;

  streamUserCarts(request: User): Observable<UserCartStreamResponse>;

  streamUserNotifications(request: User): Observable<UserNotificationStreamResponse>;
}

export interface CouponStreamServiceController {
  streamCouponIssues(request: UserPrefrences): Observable<CouponIssue>;

  streamActiveCoupons(request: User): Observable<ActiveCouponStreamResponse>;

  streamActiveBusinessesStream(request: UserPrefrences): Observable<ActiveBusinessesStreamResponse>;

  streamMoreCouponRequests(request: User): Observable<MoreCouponRequest>;

  activeCouponIssuesWithBusinessesStream(request: UserPrefrences): Observable<CouponIssueWithBusiness>;

  walletStream(request: User): Observable<WalletBalanceResponse>;

  streamActiveDrawn(request: UserPrefrences): Observable<ActiveDrawnResponse>;

  ticketsStream(request: User): Observable<TicketStreamResponse>;

  zonesStream(request: UserPrefrences): Observable<ZoneStreamResponse>;

  businessBranchStream(request: UserPrefrences): Observable<BusinessBranchStreamResponse>;

  streamUserCarts(request: User): Observable<UserCartStreamResponse>;

  streamUserNotifications(request: User): Observable<UserNotificationStreamResponse>;
}

export function CouponStreamServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "streamCouponIssues",
      "streamActiveCoupons",
      "streamActiveBusinessesStream",
      "streamMoreCouponRequests",
      "activeCouponIssuesWithBusinessesStream",
      "walletStream",
      "streamActiveDrawn",
      "ticketsStream",
      "zonesStream",
      "businessBranchStream",
      "streamUserCarts",
      "streamUserNotifications",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CouponStreamService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CouponStreamService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COUPON_STREAM_SERVICE_NAME = "CouponStreamService";
